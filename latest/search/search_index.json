{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: html","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>Kiara plugin for html-related tasks.</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#data_types","title":"data_types","text":"<ul> <li><code>html</code>: -- n/a --</li> </ul>"},{"location":"#module_types","title":"module_types","text":"<ul> <li> <p><code>pretty_print.html</code>: -- n/a --</p> </li> <li> <p><code>render.core_types.for.web</code>: -- n/a --</p> </li> <li> <p><code>render.included_types.for.web</code>: -- n/a --</p> </li> <li> <p><code>render.markdown.to.html</code>: -- n/a --</p> </li> </ul>"},{"location":"#operations","title":"operations","text":"<ul> <li> <p><code>render.dict.as.html</code>: -- n/a --</p> </li> <li> <p><code>render.file.as.html</code>: -- n/a --</p> </li> <li> <p><code>render.file_bundle.as.html</code>: -- n/a --</p> </li> <li> <p><code>render.markdown.to.html</code>: -- n/a --</p> </li> <li> <p><code>render.none.as.html</code>: -- n/a --</p> </li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.html</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.html</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n html python=3.9\nconda activate html\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.html repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.html.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.html\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.html\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t html\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>data_types</li> <li>module_types</li> <li>operations</li> </ul>"},{"location":"info/data_types/","title":"data_types","text":""},{"location":"info/data_types/#kiara_info.data_types.html","title":"<code>html</code>","text":"type_name html The registered name for this item type. documentation <p>-- n/a --</p> Documentation for the item. authors <ul> <li>Markus Binsteiner ( markus@frkl.io )</li> </ul> Information about authorship for the item. context tags html labels <ul> <li>package: kiara_plugin.html</li> </ul> references <ul> <li>source_repo: The module package git repository.</li> <li>documentation: The url for the module package documentation.</li> </ul> Generic properties of this item (description, tags, labels, references, ...). python_class python_class_name HtmlType The name of the Python class. python_module_name kiara_plugin.html.data_types The name of the Python module this class lives in. full_name kiara_plugin.html.data_types.HtmlType The full class namespace. The python class that implements this module type. value_cls python_class_name str The name of the Python class. python_module_name builtins The name of the Python module this class lives in. full_name str The full class namespace. The python class of the value itself. data_type_config_cls python_class_name StringTypeConfig The name of the Python class. python_module_name kiara.data_types.included_core_types The name of the Python module this class lives in. full_name kiara.data_types.included_core_types.StringTypeConfig The full class namespace. The python class holding the schema for configuring this type. lineage <ul> <li>     html   </li> <li>     string   </li> <li>     any   </li> </ul> This types lineage. qualifier_profiles A map of qualifier profiles for this data types."},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.pretty_print.html","title":"<code>pretty_print.html</code>","text":"type_name pretty_print.html The registered name for this item type. documentation <p>-- n/a --</p> Documentation for the item. authors <ul> <li>Markus Binsteiner ( markus@frkl.io )</li> </ul> Information about authorship for the item. context tags html labels <ul> <li>package: kiara_plugin.html</li> </ul> references <ul> <li>source_repo: The module package git repository.</li> <li>documentation: The url for the module package documentation.</li> </ul> Generic properties of this item (description, tags, labels, references, ...). python_class python_class_name PrettyPrintWebModule The name of the Python class. python_module_name kiara_plugin.html.modules The name of the Python module this class lives in. full_name kiara_plugin.html.modules.PrettyPrintWebModule The full class namespace. The python class that implements this module type. module_src class PrettyPrintWebModule(PrettyPrintModule):      _module_type_name = \"pretty_print.html\"      def pretty_print__table__as__html(         self, value: Value, render_config: Dict[str, Any]     ):          max_rows = render_config.get(             \"max_no_rows\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_no_rows\"]         )         max_row_height = render_config.get(             \"max_row_height\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_row_height\"]         )         max_cell_length = render_config.get(             \"max_cell_length\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_cell_length\"]         )          half_lines: Union[None, int] = None         if max_rows:             half_lines = int(max_rows / 2)          atw = ArrowTabularWrap(value.data.arrow_table)         result = atw.as_html(             rows_head=half_lines,             rows_tail=half_lines,             max_row_height=max_row_height,             max_cell_length=max_cell_length,         )         return result  The source code of the process method of the module."},{"location":"info/module_types/#kiara_info.module_types.render.core_types.for.web","title":"<code>render.core_types.for.web</code>","text":"type_name render.core_types.for.web The registered name for this item type. documentation <p>-- n/a --</p> Documentation for the item. authors <ul> <li>Markus Binsteiner ( markus@frkl.io )</li> </ul> Information about authorship for the item. context tags html labels <ul> <li>package: kiara_plugin.html</li> </ul> references <ul> <li>source_repo: The module package git repository.</li> <li>documentation: The url for the module package documentation.</li> </ul> Generic properties of this item (description, tags, labels, references, ...). python_class python_class_name RenderCoreTypeModuleWeb The name of the Python class. python_module_name kiara_plugin.html.modules.core_types The name of the Python module this class lives in. full_name kiara_plugin.html.modules.core_types.RenderCoreTypeModuleWeb The full class namespace. The python class that implements this module type. module_src class RenderCoreTypeModuleWeb(RenderValueModule):     _module_type_name = \"render.core_types.for.web\"      def render__dict__as__html(self, value: Value, render_config: Mapping[str, Any]):          render_scene = render_config.get(\"scene_name\", \"data\")         # input_number_of_rows = render_config.get(\"number_of_rows\", 20)         # input_row_offset = render_config.get(\"row_offset\", 0)         as_table = render_config.get(\"as_table\", True)          dict_model: KiaraDict = value.data          if render_scene == \"data\":             to_render = dict_model.dict_data         elif render_scene == \"schema\":             to_render = dict_model.data_schema         else:             raise KiaraProcessingException(                 f\"Invalid value '{render_scene}' argument 'scene_name': only 'data' and 'schema' are allowed\"             )          from json2html import json2html          if as_table:             if not to_render:                 pretty = \"-- empty dict --\"             else:                 pretty = json2html.convert(                     json=to_render,                     table_attributes=f'id=\"dict-preview-{ value.value_id }\" class=\"\"',                 )         else:             json_string = orjson_dumps(                 dict_model.dict_data,                 option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2,             )             pretty = highlight(json_string, JsonLexer(), HtmlFormatter())          related_scenes = {             \"data\": RenderScene.construct(                 title=\"data\",                 disabled=render_scene == \"data\",                 description=\"Render the data of the dict.\",                 manifest_hash=self.manifest.manifest_hash,                 render_config={\"scene_name\": \"data\"},             ),             \"schema\": RenderScene.construct(                 title=\"schema\",                 disabled=render_scene == \"schema\",                 description=\"Show the (json) schema of the dict value.\",                 manifest_hash=self.manifest.manifest_hash,                 render_config={\"scene_name\": \"schema\"},             ),         }          return RenderValueResult(             value_id=value.value_id,             render_config=render_config,             render_manifest=self.manifest.manifest_hash,             rendered=pretty,             related_scenes=related_scenes,         )  The source code of the process method of the module."},{"location":"info/module_types/#kiara_info.module_types.render.included_types.for.web","title":"<code>render.included_types.for.web</code>","text":"type_name render.included_types.for.web The registered name for this item type. documentation <p>-- n/a --</p> Documentation for the item. authors <ul> <li>Markus Binsteiner ( markus@frkl.io )</li> </ul> Information about authorship for the item. context tags html labels <ul> <li>package: kiara_plugin.html</li> </ul> references <ul> <li>source_repo: The module package git repository.</li> <li>documentation: The url for the module package documentation.</li> </ul> Generic properties of this item (description, tags, labels, references, ...). python_class python_class_name RenderCoreTypeModuleWeb The name of the Python class. python_module_name kiara_plugin.html.modules.included_types The name of the Python module this class lives in. full_name kiara_plugin.html.modules.included_types.RenderCoreTypeModuleWeb The full class namespace. The python class that implements this module type. module_src class RenderCoreTypeModuleWeb(RenderValueModule):     _module_type_name = \"render.included_types.for.web\"      def render__none__as__html(self, value: Value, render_config: Mapping[str, Any]):          return RenderValueResult(             value_id=value.value_id,             render_config=render_config,             render_manifest=self.manifest.manifest_hash,             rendered=\"-- value empty --\",             related_scenes={},         )      def render__file_bundle__as__html(         self, value: Value, render_config: Mapping[str, Any]     ):          import humanfriendly          # render_scene = render_config.get(\"scene_name\", \"data\")         file_bundle: KiaraFileBundle = value.data          # to_render = file_bundle.dict()          doc = Airium()         with doc.table():             with doc.tr():                 with doc.th():                     doc(\"included_files\")                 with doc.th():                     doc(\"metadata\")             with doc.tr():                 with doc.td():                     with doc.table():                         for file_name, incl_file in file_bundle.included_files.items():                             with doc.tr():                                 with doc.td():                                     doc(file_name)                                 with doc.td():                                     file_size = humanfriendly.format_size(                                         incl_file.size                                     )                                     doc(file_size)                 with doc.td():                     with doc.table():                         with doc.tr():                             with doc.td():                                 doc(\"bundle name\")                             with doc.td():                                 doc(file_bundle.bundle_name)                         with doc.tr():                             with doc.td():                                 doc(\"bundle size\")                             with doc.td():                                 bundle_size = humanfriendly.format_size(                                     file_bundle.size                                 )                                 doc(bundle_size)          pretty = str(doc)          return RenderValueResult(             value_id=value.value_id,             render_config=render_config,             render_manifest=self.manifest.manifest_hash,             rendered=pretty,             related_scenes={},         )      def render__file__as__html(self, value: Value, render_config: Mapping[str, Any]):          # render_scene = render_config.get(\"scene_name\", \"data\")         file: KiaraFile = value.data          text = file.read_text(max_lines=20)         text = f\"{text}\\n\\n... (truncated)\"          text = text.replace(\"\\n\", \"\")         pretty = text          return RenderValueResult(             value_id=value.value_id,             render_config=render_config,             render_manifest=self.manifest.manifest_hash,             rendered=pretty,             related_scenes={},         )  The source code of the process method of the module."},{"location":"info/module_types/#kiara_info.module_types.render.markdown.to.html","title":"<code>render.markdown.to.html</code>","text":"type_name render.markdown.to.html The registered name for this item type. documentation <p>-- n/a --</p> Documentation for the item. authors <ul> <li>Markus Binsteiner ( markus@frkl.io )</li> </ul> Information about authorship for the item. context tags html labels <ul> <li>package: kiara_plugin.html</li> </ul> references <ul> <li>source_repo: The module package git repository.</li> <li>documentation: The url for the module package documentation.</li> </ul> Generic properties of this item (description, tags, labels, references, ...). python_class python_class_name RenderMarkdown The name of the Python class. python_module_name kiara_plugin.html.modules The name of the Python module this class lives in. full_name kiara_plugin.html.modules.RenderMarkdown The full class namespace. The python class that implements this module type. module_src class RenderMarkdown(KiaraModule):      _module_type_name = \"render.markdown.to.html\"      def create_inputs_schema(         self,     ) -&gt; ValueMapSchema:          return {\"markdown\": {\"type\": \"string\", \"doc\": \"The markdown string\"}}      def create_outputs_schema(         self,     ) -&gt; ValueMapSchema:          return {\"html\": {\"type\": \"html\", \"doc\": \"The rendered html\"}}      def process(self, inputs: ValueMap, outputs: ValueMap):          import markdown          markdown_string = inputs.get_value_data(\"markdown\")         html = markdown.markdown(markdown_string)          outputs.set_value(\"html\", html)  The source code of the process method of the module."},{"location":"info/operations/","title":"operations","text":""},{"location":"info/operations/#kiara_info.operations.render.dict.as.html","title":"<code>render.dict.as.html</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default value dict A value of type 'dict' yes render_config dict Instructions/config on how (or what) to render the provided value. no {} Outputs field name type description required default render_value_result render_value_result The rendered value, incl. some metadata. yes"},{"location":"info/operations/#kiara_info.operations.render.file.as.html","title":"<code>render.file.as.html</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default value file A value of type 'file' yes render_config dict Instructions/config on how (or what) to render the provided value. no {} Outputs field name type description required default render_value_result render_value_result The rendered value, incl. some metadata. yes"},{"location":"info/operations/#kiara_info.operations.render.file_bundle.as.html","title":"<code>render.file_bundle.as.html</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default value file_bundle A value of type 'file_bundle' yes render_config dict Instructions/config on how (or what) to render the provided value. no {} Outputs field name type description required default render_value_result render_value_result The rendered value, incl. some metadata. yes"},{"location":"info/operations/#kiara_info.operations.render.markdown.to.html","title":"<code>render.markdown.to.html</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default markdown string The markdown string yes Outputs field name type description required default html html The rendered html yes"},{"location":"info/operations/#kiara_info.operations.render.none.as.html","title":"<code>render.none.as.html</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default value none A value of type 'none' no render_config dict Instructions/config on how (or what) to render the provided value. no {} Outputs field name type description required default render_value_result render_value_result The rendered value, incl. some metadata. yes"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>html<ul> <li>data_types</li> <li>defaults</li> <li>interfaces<ul> <li>cli</li> </ul> </li> <li>models</li> <li>modules<ul> <li>core_types</li> <li>included_types</li> <li>tabular</li> </ul> </li> <li>pipelines</li> <li>renderers<ul> <li>lineage</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/html/__init__/","title":"html","text":"<p>Top-level package for kiara_plugin.html.</p>"},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: html', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.html'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.html/'}}, 'tags': ['html'], 'labels': {'package': 'kiara_plugin.html'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.html.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.html.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.html.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.html.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html.find_renderer_classes","title":"<code>find_renderer_classes: KiaraEntryPointItem = (find_kiara_renderers_under, 'kiara_plugin.html.renderers')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/__init__/#kiara_plugin.html.get_version","title":"<code>get_version()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except Exception as e:\n            from kiara.utils import log_exception\n\n            log_exception(e)\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/html/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.html</code> package.</p>"},{"location":"reference/kiara_plugin/html/data_types/#kiara_plugin.html.data_types-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/html/data_types/#kiara_plugin.html.data_types.HtmlType","title":"<code>HtmlType</code>","text":"<p>         Bases: <code>StringType</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/data_types.py</code> <pre><code>class HtmlType(StringType):\n\n    _data_type_name = \"html\"\n</code></pre>"},{"location":"reference/kiara_plugin/html/defaults/","title":"defaults","text":""},{"location":"reference/kiara_plugin/html/defaults/#kiara_plugin.html.defaults-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/html/defaults/#kiara_plugin.html.defaults.kiara_html_app_dirs","title":"<code>kiara_html_app_dirs = AppDirs('kiara-html', 'frkl')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/defaults/#kiara_plugin.html.defaults.KIARA_MODULE_BASE_FOLDER","title":"<code>KIARA_MODULE_BASE_FOLDER = os.path.dirname(__file__)</code>  <code>module-attribute</code>","text":"<p>Marker to indicate the base folder for the <code>kiara_streamlit</code> module.</p>"},{"location":"reference/kiara_plugin/html/defaults/#kiara_plugin.html.defaults.KIARA_HTML_RESOURCES_FOLDER","title":"<code>KIARA_HTML_RESOURCES_FOLDER = os.path.join(KIARA_MODULE_BASE_FOLDER, 'resources')</code>  <code>module-attribute</code>","text":"<p>Default resources folder for this package.</p>"},{"location":"reference/kiara_plugin/html/interfaces/__init__/","title":"interfaces","text":""},{"location":"reference/kiara_plugin/html/interfaces/cli/__init__/","title":"cli","text":""},{"location":"reference/kiara_plugin/html/models/__init__/","title":"models","text":""},{"location":"reference/kiara_plugin/html/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules.RenderMarkdown","title":"<code>RenderMarkdown</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/__init__.py</code> <pre><code>class RenderMarkdown(KiaraModule):\n\n    _module_type_name = \"render.markdown.to.html\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\"markdown\": {\"type\": \"string\", \"doc\": \"The markdown string\"}}\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\"html\": {\"type\": \"html\", \"doc\": \"The rendered html\"}}\n\n    def process(self, inputs: ValueMap, outputs: ValueMap):\n\n        import markdown\n\n        markdown_string = inputs.get_value_data(\"markdown\")\n        html = markdown.markdown(markdown_string)\n\n        outputs.set_value(\"html\", html)\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules.RenderMarkdown-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules.RenderMarkdown.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/__init__.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\"markdown\": {\"type\": \"string\", \"doc\": \"The markdown string\"}}\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules.RenderMarkdown.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\"html\": {\"type\": \"html\", \"doc\": \"The rendered html\"}}\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules.RenderMarkdown.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap):\n\n    import markdown\n\n    markdown_string = inputs.get_value_data(\"markdown\")\n    html = markdown.markdown(markdown_string)\n\n    outputs.set_value(\"html\", html)\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules.PrettyPrintWebModule","title":"<code>PrettyPrintWebModule</code>","text":"<p>         Bases: <code>PrettyPrintModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/__init__.py</code> <pre><code>class PrettyPrintWebModule(PrettyPrintModule):\n\n    _module_type_name = \"pretty_print.html\"\n\n    def pretty_print__table__as__html(\n        self, value: Value, render_config: Dict[str, Any]\n    ):\n\n        max_rows = render_config.get(\n            \"max_no_rows\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_no_rows\"]\n        )\n        max_row_height = render_config.get(\n            \"max_row_height\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_row_height\"]\n        )\n        max_cell_length = render_config.get(\n            \"max_cell_length\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_cell_length\"]\n        )\n\n        half_lines: Union[None, int] = None\n        if max_rows:\n            half_lines = int(max_rows / 2)\n\n        atw = ArrowTabularWrap(value.data.arrow_table)\n        result = atw.as_html(\n            rows_head=half_lines,\n            rows_tail=half_lines,\n            max_row_height=max_row_height,\n            max_cell_length=max_cell_length,\n        )\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules.PrettyPrintWebModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/modules/__init__/#kiara_plugin.html.modules.PrettyPrintWebModule.pretty_print__table__as__html","title":"<code>pretty_print__table__as__html(value: Value, render_config: Dict[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/__init__.py</code> <pre><code>def pretty_print__table__as__html(\n    self, value: Value, render_config: Dict[str, Any]\n):\n\n    max_rows = render_config.get(\n        \"max_no_rows\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_no_rows\"]\n    )\n    max_row_height = render_config.get(\n        \"max_row_height\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_row_height\"]\n    )\n    max_cell_length = render_config.get(\n        \"max_cell_length\", DEFAULT_PRETTY_PRINT_CONFIG[\"max_cell_length\"]\n    )\n\n    half_lines: Union[None, int] = None\n    if max_rows:\n        half_lines = int(max_rows / 2)\n\n    atw = ArrowTabularWrap(value.data.arrow_table)\n    result = atw.as_html(\n        rows_head=half_lines,\n        rows_tail=half_lines,\n        max_row_height=max_row_height,\n        max_cell_length=max_cell_length,\n    )\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/core_types/","title":"core_types","text":""},{"location":"reference/kiara_plugin/html/modules/core_types/#kiara_plugin.html.modules.core_types-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/html/modules/core_types/#kiara_plugin.html.modules.core_types.RenderCoreTypeModuleWeb","title":"<code>RenderCoreTypeModuleWeb</code>","text":"<p>         Bases: <code>RenderValueModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/core_types.py</code> <pre><code>class RenderCoreTypeModuleWeb(RenderValueModule):\n    _module_type_name = \"render.core_types.for.web\"\n\n    def render__dict__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n        render_scene = render_config.get(\"scene_name\", \"data\")\n        # input_number_of_rows = render_config.get(\"number_of_rows\", 20)\n        # input_row_offset = render_config.get(\"row_offset\", 0)\n        as_table = render_config.get(\"as_table\", True)\n\n        dict_model: KiaraDict = value.data\n\n        if render_scene == \"data\":\n            to_render = dict_model.dict_data\n        elif render_scene == \"schema\":\n            to_render = dict_model.data_schema\n        else:\n            raise KiaraProcessingException(\n                f\"Invalid value '{render_scene}' argument 'scene_name': only 'data' and 'schema' are allowed\"\n            )\n\n        from json2html import json2html\n\n        if as_table:\n            if not to_render:\n                pretty = \"-- empty dict --\"\n            else:\n                pretty = json2html.convert(\n                    json=to_render,\n                    table_attributes=f'id=\"dict-preview-{ value.value_id }\" class=\"\"',\n                )\n        else:\n            json_string = orjson_dumps(\n                dict_model.dict_data,\n                option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2,\n            )\n            pretty = highlight(json_string, JsonLexer(), HtmlFormatter())\n\n        related_scenes = {\n            \"data\": RenderScene.construct(\n                title=\"data\",\n                disabled=render_scene == \"data\",\n                description=\"Render the data of the dict.\",\n                manifest_hash=self.manifest.manifest_hash,\n                render_config={\"scene_name\": \"data\"},\n            ),\n            \"schema\": RenderScene.construct(\n                title=\"schema\",\n                disabled=render_scene == \"schema\",\n                description=\"Show the (json) schema of the dict value.\",\n                manifest_hash=self.manifest.manifest_hash,\n                render_config={\"scene_name\": \"schema\"},\n            ),\n        }\n\n        return RenderValueResult(\n            value_id=value.value_id,\n            render_config=render_config,\n            render_manifest=self.manifest.manifest_hash,\n            rendered=pretty,\n            related_scenes=related_scenes,\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/core_types/#kiara_plugin.html.modules.core_types.RenderCoreTypeModuleWeb-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/modules/core_types/#kiara_plugin.html.modules.core_types.RenderCoreTypeModuleWeb.render__dict__as__html","title":"<code>render__dict__as__html(value: Value, render_config: Mapping[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/core_types.py</code> <pre><code>def render__dict__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n    render_scene = render_config.get(\"scene_name\", \"data\")\n    # input_number_of_rows = render_config.get(\"number_of_rows\", 20)\n    # input_row_offset = render_config.get(\"row_offset\", 0)\n    as_table = render_config.get(\"as_table\", True)\n\n    dict_model: KiaraDict = value.data\n\n    if render_scene == \"data\":\n        to_render = dict_model.dict_data\n    elif render_scene == \"schema\":\n        to_render = dict_model.data_schema\n    else:\n        raise KiaraProcessingException(\n            f\"Invalid value '{render_scene}' argument 'scene_name': only 'data' and 'schema' are allowed\"\n        )\n\n    from json2html import json2html\n\n    if as_table:\n        if not to_render:\n            pretty = \"-- empty dict --\"\n        else:\n            pretty = json2html.convert(\n                json=to_render,\n                table_attributes=f'id=\"dict-preview-{ value.value_id }\" class=\"\"',\n            )\n    else:\n        json_string = orjson_dumps(\n            dict_model.dict_data,\n            option=orjson.OPT_NON_STR_KEYS | orjson.OPT_INDENT_2,\n        )\n        pretty = highlight(json_string, JsonLexer(), HtmlFormatter())\n\n    related_scenes = {\n        \"data\": RenderScene.construct(\n            title=\"data\",\n            disabled=render_scene == \"data\",\n            description=\"Render the data of the dict.\",\n            manifest_hash=self.manifest.manifest_hash,\n            render_config={\"scene_name\": \"data\"},\n        ),\n        \"schema\": RenderScene.construct(\n            title=\"schema\",\n            disabled=render_scene == \"schema\",\n            description=\"Show the (json) schema of the dict value.\",\n            manifest_hash=self.manifest.manifest_hash,\n            render_config={\"scene_name\": \"schema\"},\n        ),\n    }\n\n    return RenderValueResult(\n        value_id=value.value_id,\n        render_config=render_config,\n        render_manifest=self.manifest.manifest_hash,\n        rendered=pretty,\n        related_scenes=related_scenes,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/included_types/","title":"included_types","text":""},{"location":"reference/kiara_plugin/html/modules/included_types/#kiara_plugin.html.modules.included_types-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/html/modules/included_types/#kiara_plugin.html.modules.included_types.RenderCoreTypeModuleWeb","title":"<code>RenderCoreTypeModuleWeb</code>","text":"<p>         Bases: <code>RenderValueModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/included_types.py</code> <pre><code>class RenderCoreTypeModuleWeb(RenderValueModule):\n    _module_type_name = \"render.included_types.for.web\"\n\n    def render__none__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n        return RenderValueResult(\n            value_id=value.value_id,\n            render_config=render_config,\n            render_manifest=self.manifest.manifest_hash,\n            rendered=\"&lt;div&gt;-- value empty --&lt;/div&gt;\",\n            related_scenes={},\n        )\n\n    def render__file_bundle__as__html(\n        self, value: Value, render_config: Mapping[str, Any]\n    ):\n\n        import humanfriendly\n\n        # render_scene = render_config.get(\"scene_name\", \"data\")\n        file_bundle: KiaraFileBundle = value.data\n\n        # to_render = file_bundle.dict()\n\n        doc = Airium()\n        with doc.table():\n            with doc.tr():\n                with doc.th():\n                    doc(\"included_files\")\n                with doc.th():\n                    doc(\"metadata\")\n            with doc.tr():\n                with doc.td():\n                    with doc.table():\n                        for file_name, incl_file in file_bundle.included_files.items():\n                            with doc.tr():\n                                with doc.td():\n                                    doc(file_name)\n                                with doc.td():\n                                    file_size = humanfriendly.format_size(\n                                        incl_file.size\n                                    )\n                                    doc(file_size)\n                with doc.td():\n                    with doc.table():\n                        with doc.tr():\n                            with doc.td():\n                                doc(\"bundle name\")\n                            with doc.td():\n                                doc(file_bundle.bundle_name)\n                        with doc.tr():\n                            with doc.td():\n                                doc(\"bundle size\")\n                            with doc.td():\n                                bundle_size = humanfriendly.format_size(\n                                    file_bundle.size\n                                )\n                                doc(bundle_size)\n\n        pretty = str(doc)\n\n        return RenderValueResult(\n            value_id=value.value_id,\n            render_config=render_config,\n            render_manifest=self.manifest.manifest_hash,\n            rendered=pretty,\n            related_scenes={},\n        )\n\n    def render__file__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n        # render_scene = render_config.get(\"scene_name\", \"data\")\n        file: KiaraFile = value.data\n\n        text = file.read_text(max_lines=20)\n        text = f\"{text}\\n\\n... (truncated)\"\n\n        text = text.replace(\"\\n\", \"&lt;br&gt;\")\n        pretty = text\n\n        return RenderValueResult(\n            value_id=value.value_id,\n            render_config=render_config,\n            render_manifest=self.manifest.manifest_hash,\n            rendered=pretty,\n            related_scenes={},\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/included_types/#kiara_plugin.html.modules.included_types.RenderCoreTypeModuleWeb-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/modules/included_types/#kiara_plugin.html.modules.included_types.RenderCoreTypeModuleWeb.render__none__as__html","title":"<code>render__none__as__html(value: Value, render_config: Mapping[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/included_types.py</code> <pre><code>def render__none__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n    return RenderValueResult(\n        value_id=value.value_id,\n        render_config=render_config,\n        render_manifest=self.manifest.manifest_hash,\n        rendered=\"&lt;div&gt;-- value empty --&lt;/div&gt;\",\n        related_scenes={},\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/included_types/#kiara_plugin.html.modules.included_types.RenderCoreTypeModuleWeb.render__file_bundle__as__html","title":"<code>render__file_bundle__as__html(value: Value, render_config: Mapping[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/included_types.py</code> <pre><code>def render__file_bundle__as__html(\n    self, value: Value, render_config: Mapping[str, Any]\n):\n\n    import humanfriendly\n\n    # render_scene = render_config.get(\"scene_name\", \"data\")\n    file_bundle: KiaraFileBundle = value.data\n\n    # to_render = file_bundle.dict()\n\n    doc = Airium()\n    with doc.table():\n        with doc.tr():\n            with doc.th():\n                doc(\"included_files\")\n            with doc.th():\n                doc(\"metadata\")\n        with doc.tr():\n            with doc.td():\n                with doc.table():\n                    for file_name, incl_file in file_bundle.included_files.items():\n                        with doc.tr():\n                            with doc.td():\n                                doc(file_name)\n                            with doc.td():\n                                file_size = humanfriendly.format_size(\n                                    incl_file.size\n                                )\n                                doc(file_size)\n            with doc.td():\n                with doc.table():\n                    with doc.tr():\n                        with doc.td():\n                            doc(\"bundle name\")\n                        with doc.td():\n                            doc(file_bundle.bundle_name)\n                    with doc.tr():\n                        with doc.td():\n                            doc(\"bundle size\")\n                        with doc.td():\n                            bundle_size = humanfriendly.format_size(\n                                file_bundle.size\n                            )\n                            doc(bundle_size)\n\n    pretty = str(doc)\n\n    return RenderValueResult(\n        value_id=value.value_id,\n        render_config=render_config,\n        render_manifest=self.manifest.manifest_hash,\n        rendered=pretty,\n        related_scenes={},\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/included_types/#kiara_plugin.html.modules.included_types.RenderCoreTypeModuleWeb.render__file__as__html","title":"<code>render__file__as__html(value: Value, render_config: Mapping[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/included_types.py</code> <pre><code>def render__file__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n    # render_scene = render_config.get(\"scene_name\", \"data\")\n    file: KiaraFile = value.data\n\n    text = file.read_text(max_lines=20)\n    text = f\"{text}\\n\\n... (truncated)\"\n\n    text = text.replace(\"\\n\", \"&lt;br&gt;\")\n    pretty = text\n\n    return RenderValueResult(\n        value_id=value.value_id,\n        render_config=render_config,\n        render_manifest=self.manifest.manifest_hash,\n        rendered=pretty,\n        related_scenes={},\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/tabular/","title":"tabular","text":""},{"location":"reference/kiara_plugin/html/modules/tabular/#kiara_plugin.html.modules.tabular-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/html/modules/tabular/#kiara_plugin.html.modules.tabular.RenderTableModuleWeb","title":"<code>RenderTableModuleWeb</code>","text":"<p>         Bases: <code>RenderTableModuleBase</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/tabular.py</code> <pre><code>class RenderTableModuleWeb(RenderTableModuleBase):\n    _module_type_name = \"render.table.for.web\"\n\n    def render__table__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n        input_number_of_rows = render_config.get(\"number_of_rows\", 20)\n        input_row_offset = render_config.get(\"row_offset\", 0)\n\n        wrap, data_related_scenes = self.preprocess_table(\n            value=value,\n            input_number_of_rows=input_number_of_rows,\n            input_row_offset=input_row_offset,\n        )\n        pretty = wrap.as_html(max_row_height=1)\n\n        return RenderValueResult(\n            value_id=value.value_id,\n            render_config=render_config,\n            render_manifest=self.manifest.manifest_hash,\n            rendered=pretty,\n            related_scenes=data_related_scenes,\n        )\n\n    def render__array__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n        return self.render__table__as__html(value=value, render_config=render_config)\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/tabular/#kiara_plugin.html.modules.tabular.RenderTableModuleWeb-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/modules/tabular/#kiara_plugin.html.modules.tabular.RenderTableModuleWeb.render__table__as__html","title":"<code>render__table__as__html(value: Value, render_config: Mapping[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/tabular.py</code> <pre><code>def render__table__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n    input_number_of_rows = render_config.get(\"number_of_rows\", 20)\n    input_row_offset = render_config.get(\"row_offset\", 0)\n\n    wrap, data_related_scenes = self.preprocess_table(\n        value=value,\n        input_number_of_rows=input_number_of_rows,\n        input_row_offset=input_row_offset,\n    )\n    pretty = wrap.as_html(max_row_height=1)\n\n    return RenderValueResult(\n        value_id=value.value_id,\n        render_config=render_config,\n        render_manifest=self.manifest.manifest_hash,\n        rendered=pretty,\n        related_scenes=data_related_scenes,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/tabular/#kiara_plugin.html.modules.tabular.RenderTableModuleWeb.render__array__as__html","title":"<code>render__array__as__html(value: Value, render_config: Mapping[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/tabular.py</code> <pre><code>def render__array__as__html(self, value: Value, render_config: Mapping[str, Any]):\n\n    return self.render__table__as__html(value=value, render_config=render_config)\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/tabular/#kiara_plugin.html.modules.tabular.RenderDatabaseModule","title":"<code>RenderDatabaseModule</code>","text":"<p>         Bases: <code>RenderDatabaseModuleBase</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/tabular.py</code> <pre><code>class RenderDatabaseModule(RenderDatabaseModuleBase):\n    _module_type_name = \"render.database.for.web\"\n\n    def render__database__as__html(\n        self, value: Value, render_config: Mapping[str, Any]\n    ):\n\n        input_number_of_rows = render_config.get(\"number_of_rows\", 20)\n        input_row_offset = render_config.get(\"row_offset\", 0)\n\n        table_name = render_config.get(\"table_name\", None)\n\n        wrap, data_related_scenes = self.preprocess_database(\n            value=value,\n            table_name=table_name,\n            input_number_of_rows=input_number_of_rows,\n            input_row_offset=input_row_offset,\n        )\n        pretty = wrap.as_html(max_row_height=1)\n\n        result = RenderValueResult(\n            value_id=value.value_id,\n            render_config=render_config,\n            render_manifest=self.manifest.manifest_hash,\n            rendered=pretty,\n            related_scenes=data_related_scenes,\n        )\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/html/modules/tabular/#kiara_plugin.html.modules.tabular.RenderDatabaseModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/modules/tabular/#kiara_plugin.html.modules.tabular.RenderDatabaseModule.render__database__as__html","title":"<code>render__database__as__html(value: Value, render_config: Mapping[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/modules/tabular.py</code> <pre><code>def render__database__as__html(\n    self, value: Value, render_config: Mapping[str, Any]\n):\n\n    input_number_of_rows = render_config.get(\"number_of_rows\", 20)\n    input_row_offset = render_config.get(\"row_offset\", 0)\n\n    table_name = render_config.get(\"table_name\", None)\n\n    wrap, data_related_scenes = self.preprocess_database(\n        value=value,\n        table_name=table_name,\n        input_number_of_rows=input_number_of_rows,\n        input_row_offset=input_row_offset,\n    )\n    pretty = wrap.as_html(max_row_height=1)\n\n    result = RenderValueResult(\n        value_id=value.value_id,\n        render_config=render_config,\n        render_manifest=self.manifest.manifest_hash,\n        rendered=pretty,\n        related_scenes=data_related_scenes,\n    )\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/html/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"},{"location":"reference/kiara_plugin/html/renderers/__init__/","title":"renderers","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/","title":"lineage","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageHtmlInputs","title":"<code>LineageHtmlInputs</code>","text":"<p>         Bases: <code>RenderInputsSchema</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>class LineageHtmlInputs(RenderInputsSchema):\n\n    render_style: str = Field(\n        description=\"The style to use for rendering the lineage graph.\",\n        default=\"default\",\n    )\n    config: Dict[str, Any] = Field(\n        description=\"Additional, optional configuration for the renderer.\",\n        default_factory=dict,\n    )\n\n    @root_validator(pre=True)\n    def validate_linage_inputs(cls, values):\n\n        result = {}\n        result[\"render_style\"] = values.pop(\"render_style\", \"default\")\n        config = values.pop(\"config\", {})\n        if config:\n            result[\"config\"] = config\n        else:\n            result[\"config\"] = values\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageHtmlInputs-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageHtmlInputs.render_style","title":"<code>render_style: str = Field(description='The style to use for rendering the lineage graph.', default='default')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageHtmlInputs.config","title":"<code>config: Dict[str, Any] = Field(description='Additional, optional configuration for the renderer.', default_factory=dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageHtmlInputs-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageHtmlInputs.validate_linage_inputs","title":"<code>validate_linage_inputs(values)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>@root_validator(pre=True)\ndef validate_linage_inputs(cls, values):\n\n    result = {}\n    result[\"render_style\"] = values.pop(\"render_style\", \"default\")\n    config = values.pop(\"config\", {})\n    if config:\n        result[\"config\"] = config\n    else:\n        result[\"config\"] = values\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageHtmlRendererConfig","title":"<code>LineageHtmlRendererConfig</code>","text":"<p>         Bases: <code>KiaraRendererConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>class LineageHtmlRendererConfig(KiaraRendererConfig):\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageTransformer","title":"<code>LineageTransformer</code>","text":"<p>         Bases: <code>SourceTransformer</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>class LineageTransformer(SourceTransformer):\n    def __init__(self, kiara: Kiara):\n\n        self._kiara: Kiara = kiara\n        super().__init__()\n\n    def retrieve_supported_python_classes(self) -&gt; Iterable[Type]:\n\n        return [Value, ValueLineage, str, uuid.UUID]\n\n    def retrieve_supported_inputs_descs(self) -&gt; Union[str, Iterable[str]]:\n        return [\n            \"a value object\",\n            \"a value alias\",\n            \"a value id\",\n            \"a value lineeage object\",\n        ]\n\n    def validate_and_transform(self, source: Any) -&gt; Union[ValueLineage, None]:\n        if isinstance(source, ValueLineage):\n            return source\n        value = self._kiara.data_registry.get_value(source)\n        return value.lineage\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageTransformer-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageTransformer.retrieve_supported_python_classes","title":"<code>retrieve_supported_python_classes() -&gt; Iterable[Type]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def retrieve_supported_python_classes(self) -&gt; Iterable[Type]:\n\n    return [Value, ValueLineage, str, uuid.UUID]\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageTransformer.retrieve_supported_inputs_descs","title":"<code>retrieve_supported_inputs_descs() -&gt; Union[str, Iterable[str]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def retrieve_supported_inputs_descs(self) -&gt; Union[str, Iterable[str]]:\n    return [\n        \"a value object\",\n        \"a value alias\",\n        \"a value id\",\n        \"a value lineeage object\",\n    ]\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageTransformer.validate_and_transform","title":"<code>validate_and_transform(source: Any) -&gt; Union[ValueLineage, None]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def validate_and_transform(self, source: Any) -&gt; Union[ValueLineage, None]:\n    if isinstance(source, ValueLineage):\n        return source\n    value = self._kiara.data_registry.get_value(source)\n    return value.lineage\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml","title":"<code>LineageRendererHtml</code>","text":"<p>         Bases: <code>KiaraRenderer[ValueLineage, LineageHtmlInputs, str, LineageHtmlRendererConfig]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>class LineageRendererHtml(\n    KiaraRenderer[ValueLineage, LineageHtmlInputs, str, LineageHtmlRendererConfig]\n):\n\n    _renderer_name = \"lineage_html\"\n    _renderer_config_cls = LineageHtmlRendererConfig  # type: ignore\n    _inputs_schema = LineageHtmlInputs  # type: ignore\n\n    def retrieve_doc(self) -&gt; Union[str, None]:\n\n        return \"Render a value lineage as html page.\"\n\n    def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n        return [LineageTransformer(kiara=self._kiara)]\n\n    def retrieve_supported_render_sources(self) -&gt; str:\n        return \"value\"\n\n    def retrieve_supported_render_targets(self) -&gt; Union[Iterable[str], str]:\n        return \"lineage_html\"\n\n    def _render(self, instance: ValueLineage, render_config: LineageHtmlInputs) -&gt; str:\n\n        render_style = render_config.render_style\n        func_name = f\"render__{render_style}\"\n        if not hasattr(self, func_name):\n            details = \"Available styles:\\n\\n\"\n            for attr in dir(self):\n                if attr.startswith(\"render__\"):\n                    details += f\" - {attr.replace('render__', '')}\\n\"\n            raise KiaraException(\n                f\"Can't render lineage in requested style '{render_style}': style not available.\",\n                details=details,\n            )\n\n        func = getattr(self, func_name)\n        result = func(lineage=instance, **render_config.config)\n\n        airium = Airium()\n        airium(\"&lt;!DOCTYPE html&gt;\")\n        with airium.html(lang=\"en\"):\n            with airium.head():\n                airium.meta(charset=\"utf-8\")\n                airium.title(_t=\"Value lineage\")\n\n            with airium.body():\n                airium(result)\n\n        return str(airium)\n\n    def render__default(self, lineage: ValueLineage, **config) -&gt; str:\n\"\"\"Renders a html tree view using ul/li elements in a recursive helper function.\n\n        There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.\n\n        \"\"\"\n\n        include_ids = config.get(\"include_ids\", False)\n        result = fill_html_lineage_tree(\n            kiara=self._kiara,\n            pedigree=lineage.value.pedigree,\n            node=None,\n            include_ids=include_ids,\n        )\n        return str(result)\n\n    def render__image(self, lineage: ValueLineage, **config) -&gt; str:\n\"\"\"Renders the lineage as a graph image.\n\n        I wrote this to show how we can include Javascript in the resulting html page. Being able to include the image bytes directly is also neat I think.\n        \"\"\"\n\n        graph = lineage.full_graph\n\n        img = create_image(graph=graph)\n        img_enc = base64.b64encode(img).decode(\"utf-8\")\n        img_id = f\"lineage_graph_img_{lineage.value.value_id}\"\n\n        airium = Airium()\n\n        with airium.div():\n            with airium.div():\n                airium(f\"Value lineage for value '{lineage.value.value_id}'\")\n            with airium.div():\n                airium.img(id=img_id, src=\"\")\n\n        with airium.script():\n            airium(\n                f'document.getElementById(\"{img_id}\").src = \"data:image/png;base64,{img_enc}\";'\n            )\n\n        return str(airium)\n\n    def render__tree(self, lineage: ValueLineage, **config) -&gt; str:\n\n        template = self._kiara.render_registry.get_template(\n            \"lineage/lineage.html.j2\", template_base=\"kiara_plugin.html\"\n        )\n\n        result = template.render(value_lineage=lineage, **config)\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml.retrieve_doc","title":"<code>retrieve_doc() -&gt; Union[str, None]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def retrieve_doc(self) -&gt; Union[str, None]:\n\n    return \"Render a value lineage as html page.\"\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml.retrieve_source_transformers","title":"<code>retrieve_source_transformers() -&gt; Iterable[SourceTransformer]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n    return [LineageTransformer(kiara=self._kiara)]\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml.retrieve_supported_render_sources","title":"<code>retrieve_supported_render_sources() -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def retrieve_supported_render_sources(self) -&gt; str:\n    return \"value\"\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml.retrieve_supported_render_targets","title":"<code>retrieve_supported_render_targets() -&gt; Union[Iterable[str], str]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def retrieve_supported_render_targets(self) -&gt; Union[Iterable[str], str]:\n    return \"lineage_html\"\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml.render__default","title":"<code>render__default(lineage: ValueLineage, **config: ValueLineage) -&gt; str</code>","text":"<p>Renders a html tree view using ul/li elements in a recursive helper function.</p> <p>There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def render__default(self, lineage: ValueLineage, **config) -&gt; str:\n\"\"\"Renders a html tree view using ul/li elements in a recursive helper function.\n\n    There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.\n\n    \"\"\"\n\n    include_ids = config.get(\"include_ids\", False)\n    result = fill_html_lineage_tree(\n        kiara=self._kiara,\n        pedigree=lineage.value.pedigree,\n        node=None,\n        include_ids=include_ids,\n    )\n    return str(result)\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml.render__image","title":"<code>render__image(lineage: ValueLineage, **config: ValueLineage) -&gt; str</code>","text":"<p>Renders the lineage as a graph image.</p> <p>I wrote this to show how we can include Javascript in the resulting html page. Being able to include the image bytes directly is also neat I think.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def render__image(self, lineage: ValueLineage, **config) -&gt; str:\n\"\"\"Renders the lineage as a graph image.\n\n    I wrote this to show how we can include Javascript in the resulting html page. Being able to include the image bytes directly is also neat I think.\n    \"\"\"\n\n    graph = lineage.full_graph\n\n    img = create_image(graph=graph)\n    img_enc = base64.b64encode(img).decode(\"utf-8\")\n    img_id = f\"lineage_graph_img_{lineage.value.value_id}\"\n\n    airium = Airium()\n\n    with airium.div():\n        with airium.div():\n            airium(f\"Value lineage for value '{lineage.value.value_id}'\")\n        with airium.div():\n            airium.img(id=img_id, src=\"\")\n\n    with airium.script():\n        airium(\n            f'document.getElementById(\"{img_id}\").src = \"data:image/png;base64,{img_enc}\";'\n        )\n\n    return str(airium)\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.LineageRendererHtml.render__tree","title":"<code>render__tree(lineage: ValueLineage, **config: ValueLineage) -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def render__tree(self, lineage: ValueLineage, **config) -&gt; str:\n\n    template = self._kiara.render_registry.get_template(\n        \"lineage/lineage.html.j2\", template_base=\"kiara_plugin.html\"\n    )\n\n    result = template.render(value_lineage=lineage, **config)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/html/renderers/lineage/#kiara_plugin.html.renderers.lineage.fill_html_lineage_tree","title":"<code>fill_html_lineage_tree(kiara: Kiara, pedigree: ValuePedigree, node: Union[Airium, None] = None, include_ids: bool = False, level: int = 0) -&gt; Airium</code>","text":"<p>Recursive helper method to get a tree structure from a root value ppedigree.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/html/renderers/lineage.py</code> <pre><code>def fill_html_lineage_tree(\n    kiara: Kiara,\n    pedigree: ValuePedigree,\n    node: Union[Airium, None] = None,\n    include_ids: bool = False,\n    level: int = 0,\n) -&gt; Airium:\n\"\"\"Recursive helper method to get a tree structure from a root value ppedigree.\"\"\"\n\n    if node is None:\n        node = Airium()\n\n    with node.ul():\n        with node.li():\n            with node.span(klass=\"nested\"):\n                node(pedigree.module_type)\n            with node.ul(klass=\"nested\"):\n                for input_name in sorted(pedigree.inputs.keys()):\n\n                    child_value_id = pedigree.inputs[input_name]\n                    child_value = kiara.data_registry.get_value(child_value_id)\n\n                    value_type = child_value.data_type_name\n                    if include_ids:\n                        v_id_str = f\" = {child_value.value_id}\"\n                    else:\n                        v_id_str = \"\"\n\n                    with node.li():\n                        node(f\"input: {input_name} ({value_type}) {v_id_str}\")\n                        if child_value.pedigree != ORPHAN:\n                            fill_html_lineage_tree(\n                                kiara=kiara,\n                                pedigree=child_value.pedigree,\n                                node=node,\n                                level=level + 1,\n                                include_ids=include_ids,\n                            )\n    return node\n</code></pre>"}]}